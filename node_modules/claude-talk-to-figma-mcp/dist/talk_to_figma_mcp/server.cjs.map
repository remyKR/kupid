{"version":3,"sources":["../../src/talk_to_figma_mcp/server.ts","../../src/talk_to_figma_mcp/config/config.ts","../../src/talk_to_figma_mcp/utils/logger.ts","../../src/talk_to_figma_mcp/utils/websocket.ts","../../src/talk_to_figma_mcp/tools/document-tools.ts","../../src/talk_to_figma_mcp/utils/figma-helpers.ts","../../src/talk_to_figma_mcp/tools/creation-tools.ts","../../src/talk_to_figma_mcp/tools/modification-tools.ts","../../src/talk_to_figma_mcp/utils/defaults.ts","../../src/talk_to_figma_mcp/tools/text-tools.ts","../../src/talk_to_figma_mcp/tools/component-tools.ts","../../src/talk_to_figma_mcp/tools/index.ts","../../src/talk_to_figma_mcp/prompts/index.ts"],"sourcesContent":["#!/usr/bin/env node\n\n/**\n * Main entry point for the Figma MCP Server\n * This file initializes the server, connects to Figma,\n * and registers all tools and prompts.\n */\n\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\n\n// Import configuration\nimport { SERVER_CONFIG } from \"./config/config\";\n\n// Import utilities\nimport { logger } from \"./utils/logger\";\nimport { connectToFigma } from \"./utils/websocket\";\n\n// Import tools registration function from tools/index.ts\nimport { registerTools } from \"./tools\";\n\n// Import prompts registration function from prompts/index.ts\nimport { registerPrompts } from \"./prompts\";\n\n/**\n * Initialize and start the MCP server\n */\nasync function main() {\n  try {\n    // Create MCP server instance with configuration\n    const server = new McpServer(SERVER_CONFIG);\n    \n    // Register all tools with the server\n    registerTools(server);\n    \n    // Register all prompts with the server\n    registerPrompts(server);\n    \n    // Try to connect to Figma socket server\n    try {\n      connectToFigma();\n    } catch (error) {\n      logger.warn(`Could not connect to Figma initially: ${error instanceof Error ? error.message : String(error)}`);\n      logger.warn('Will try to connect when the first command is sent');\n    }\n\n    // Start the MCP server with stdio transport\n    const transport = new StdioServerTransport();\n    await server.connect(transport);\n    logger.info('FigmaMCP server running on stdio');\n  } catch (error) {\n    logger.error(`Error starting FigmaMCP server: ${error instanceof Error ? error.message : String(error)}`);\n    process.exit(1);\n  }\n}\n\n// Run the server\nmain().catch(error => {\n  logger.error(`Error starting FigmaMCP server: ${error instanceof Error ? error.message : String(error)}`);\n  process.exit(1);\n});\n\n","import { z } from \"zod\";\n\n// Argumentos de línea de comandos\nconst args = process.argv.slice(2);\nconst serverArg = args.find(arg => arg.startsWith('--server='));\nconst portArg = args.find(arg => arg.startsWith('--port='));\nconst reconnectArg = args.find(arg => arg.startsWith('--reconnect-interval='));\n\n// Configuración de conexión extraída de argumentos CLI\nexport const serverUrl = serverArg ? serverArg.split('=')[1] : 'localhost';\nexport const defaultPort = portArg ? parseInt(portArg.split('=')[1], 10) : 3055;\nexport const reconnectInterval = reconnectArg ? parseInt(reconnectArg.split('=')[1], 10) : 2000;\n\n// URL de WebSocket basada en el servidor (WS para localhost, WSS para remoto)\nexport const WS_URL = serverUrl === 'localhost' ? `ws://${serverUrl}` : `wss://${serverUrl}`;\n\n// Configuración del servidor MCP\nexport const SERVER_CONFIG = {\n  name: \"ClaudeTalkToFigmaMCP\",\n  description: \"Claude MCP Plugin for Figma\",\n  version: \"0.4.0\",\n};","// Custom logging functions that write to stderr instead of stdout to avoid being captured\nexport const logger = {\n  info: (message: string) => process.stderr.write(`[INFO] ${message}\\n`),\n  debug: (message: string) => process.stderr.write(`[DEBUG] ${message}\\n`),\n  warn: (message: string) => process.stderr.write(`[WARN] ${message}\\n`),\n  error: (message: string) => process.stderr.write(`[ERROR] ${message}\\n`),\n  log: (message: string) => process.stderr.write(`[LOG] ${message}\\n`)\n};","import WebSocket from \"ws\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { logger } from \"./logger\";\nimport { serverUrl, defaultPort, WS_URL, reconnectInterval } from \"../config/config\";\nimport { FigmaCommand, FigmaResponse, CommandProgressUpdate, PendingRequest, ProgressMessage } from \"../types\";\n\n// WebSocket connection and request tracking\nlet ws: WebSocket | null = null;\nlet currentChannel: string | null = null;\n\n// Map of pending requests for promise tracking\nconst pendingRequests = new Map<string, PendingRequest>();\n\n/**\n * Connects to the Figma server via WebSocket.\n * @param port - Optional port for the connection (defaults to defaultPort from config)\n */\nexport function connectToFigma(port: number = defaultPort) {\n  // If already connected, do nothing\n  if (ws && ws.readyState === WebSocket.OPEN) {\n    logger.info('Already connected to Figma');\n    return;\n  }\n\n  // If connection is in progress (CONNECTING state), wait\n  if (ws && ws.readyState === WebSocket.CONNECTING) {\n    logger.info('Connection to Figma is already in progress');\n    return;\n  }\n\n  // If there's an existing socket in a closing state, clean it up\n  if (ws && (ws.readyState === WebSocket.CLOSING || ws.readyState === WebSocket.CLOSED)) {\n    ws.removeAllListeners();\n    ws = null;\n  }\n\n  const wsUrl = serverUrl === 'localhost' ? `${WS_URL}:${port}` : WS_URL;\n  logger.info(`Connecting to Figma socket server at ${wsUrl}...`);\n  \n  try {\n    ws = new WebSocket(wsUrl);\n    \n    // Add connection timeout\n    const connectionTimeout = setTimeout(() => {\n      if (ws && ws.readyState === WebSocket.CONNECTING) {\n        logger.error('Connection to Figma timed out');\n        ws.terminate();\n      }\n    }, 10000); // 10 second connection timeout\n    \n    ws.on('open', () => {\n      clearTimeout(connectionTimeout);\n      logger.info('Connected to Figma socket server');\n      // Reset channel on new connection\n      currentChannel = null;\n    });\n\n    ws.on(\"message\", (data: any) => {\n      try {\n        const json = JSON.parse(data) as ProgressMessage;\n\n        // Handle progress updates\n        if (json.type === 'progress_update') {\n          const progressData = json.message.data as CommandProgressUpdate;\n          const requestId = json.id || '';\n\n          if (requestId && pendingRequests.has(requestId)) {\n            const request = pendingRequests.get(requestId)!;\n\n            // Update last activity timestamp\n            request.lastActivity = Date.now();\n\n            // Reset the timeout to prevent timeouts during long-running operations\n            clearTimeout(request.timeout);\n\n            // Create a new timeout\n            request.timeout = setTimeout(() => {\n              if (pendingRequests.has(requestId)) {\n                logger.error(`Request ${requestId} timed out after extended period of inactivity`);\n                pendingRequests.delete(requestId);\n                request.reject(new Error('Request to Figma timed out'));\n              }\n            }, 60000); // 60 second timeout for inactivity\n\n            // Log progress\n            logger.info(`Progress update for ${progressData.commandType}: ${progressData.progress}% - ${progressData.message}`);\n\n            // For completed updates, we could resolve the request early if desired\n            if (progressData.status === 'completed' && progressData.progress === 100) {\n              // Optionally resolve early with partial data\n              // request.resolve(progressData.payload);\n              // pendingRequests.delete(requestId);\n\n              // Instead, just log the completion, wait for final result from Figma\n              logger.info(`Operation ${progressData.commandType} completed, waiting for final result`);\n            }\n          }\n          return;\n        }\n\n        // Handle regular responses\n        const myResponse = json.message;\n        logger.debug(`Received message: ${JSON.stringify(myResponse)}`);\n        logger.log('myResponse' + JSON.stringify(myResponse));\n\n        // Handle response to a request\n        if (\n          myResponse.id &&\n          pendingRequests.has(myResponse.id) &&\n          myResponse.result\n        ) {\n          const request = pendingRequests.get(myResponse.id)!;\n          clearTimeout(request.timeout);\n\n          if (myResponse.error) {\n            logger.error(`Error from Figma: ${myResponse.error}`);\n            request.reject(new Error(myResponse.error));\n          } else {\n            if (myResponse.result) {\n              request.resolve(myResponse.result);\n            }\n          }\n\n          pendingRequests.delete(myResponse.id);\n        } else {\n          // Handle broadcast messages or events\n          logger.info(`Received broadcast message: ${JSON.stringify(myResponse)}`);\n        }\n      } catch (error) {\n        logger.error(`Error parsing message: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    });\n\n    ws.on('error', (error) => {\n      logger.error(`Socket error: ${error}`);\n      // Don't attempt to reconnect here, let the close handler do it\n    });\n\n    ws.on('close', (code, reason) => {\n      clearTimeout(connectionTimeout);\n      logger.info(`Disconnected from Figma socket server with code ${code} and reason: ${reason || 'No reason provided'}`);\n      ws = null;\n\n      // Reject all pending requests\n      for (const [id, request] of pendingRequests.entries()) {\n        clearTimeout(request.timeout);\n        request.reject(new Error(`Connection closed with code ${code}: ${reason || 'No reason provided'}`));\n        pendingRequests.delete(id);\n      }\n\n      // Attempt to reconnect with exponential backoff\n      const backoff = Math.min(30000, reconnectInterval * Math.pow(1.5, Math.floor(Math.random() * 5))); // Max 30s\n      logger.info(`Attempting to reconnect in ${backoff/1000} seconds...`);\n      setTimeout(() => connectToFigma(port), backoff);\n    });\n    \n  } catch (error) {\n    logger.error(`Failed to create WebSocket connection: ${error instanceof Error ? error.message : String(error)}`);\n    // Attempt to reconnect after a delay\n    setTimeout(() => connectToFigma(port), reconnectInterval);\n  }\n}\n\n/**\n * Join a specific channel in Figma.\n * @param channelName - Name of the channel to join\n * @returns Promise that resolves when successfully joined the channel\n */\nexport async function joinChannel(channelName: string): Promise<void> {\n  if (!ws || ws.readyState !== WebSocket.OPEN) {\n    throw new Error(\"Not connected to Figma\");\n  }\n\n  try {\n    await sendCommandToFigma(\"join\", { channel: channelName });\n    currentChannel = channelName;\n    logger.info(`Joined channel: ${channelName}`);\n  } catch (error) {\n    logger.error(`Failed to join channel: ${error instanceof Error ? error.message : String(error)}`);\n    throw error;\n  }\n}\n\n/**\n * Get the current channel the connection is joined to.\n * @returns The current channel name or null if not connected to any channel\n */\nexport function getCurrentChannel(): string | null {\n  return currentChannel;\n}\n\n/**\n * Send a command to Figma via WebSocket.\n * @param command - The command to send\n * @param params - Additional parameters for the command\n * @param timeoutMs - Timeout in milliseconds before failing\n * @returns A promise that resolves with the Figma response\n */\nexport function sendCommandToFigma(\n  command: FigmaCommand,\n  params: unknown = {},\n  timeoutMs: number = 30000\n): Promise<unknown> {\n  return new Promise((resolve, reject) => {\n    // If not connected, try to connect first\n    if (!ws || ws.readyState !== WebSocket.OPEN) {\n      connectToFigma();\n      reject(new Error(\"Not connected to Figma. Attempting to connect...\"));\n      return;\n    }\n\n    // Check if we need a channel for this command\n    const requiresChannel = command !== \"join\";\n    if (requiresChannel && !currentChannel) {\n      reject(new Error(\"Must join a channel before sending commands\"));\n      return;\n    }\n\n    const id = uuidv4();\n    const request = {\n      id,\n      type: command === \"join\" ? \"join\" : \"message\",\n      ...(command === \"join\"\n        ? { channel: (params as any).channel }\n        : { channel: currentChannel }),\n      message: {\n        id,\n        command,\n        params: {\n          ...(params as any),\n          commandId: id, // Include the command ID in params\n        },\n      },\n    };\n\n    // Set timeout for request\n    const timeout = setTimeout(() => {\n      if (pendingRequests.has(id)) {\n        pendingRequests.delete(id);\n        logger.error(`Request ${id} to Figma timed out after ${timeoutMs / 1000} seconds`);\n        reject(new Error('Request to Figma timed out'));\n      }\n    }, timeoutMs);\n\n    // Store the promise callbacks to resolve/reject later\n    pendingRequests.set(id, {\n      resolve,\n      reject,\n      timeout,\n      lastActivity: Date.now()\n    });\n\n    // Send the request\n    logger.info(`Sending command to Figma: ${command}`);\n    logger.debug(`Request details: ${JSON.stringify(request)}`);\n    ws.send(JSON.stringify(request));\n  });\n}","import { z } from \"zod\";\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { sendCommandToFigma, joinChannel } from \"../utils/websocket.js\";\nimport { filterFigmaNode } from \"../utils/figma-helpers.js\";\n\n/**\n * Register document-related tools to the MCP server\n * @param server - The MCP server instance\n */\nexport function registerDocumentTools(server: McpServer): void {\n  // Document Info Tool\n  server.tool(\n    \"get_document_info\",\n    \"Get detailed information about the current Figma document\",\n    {},\n    async () => {\n      try {\n        const result = await sendCommandToFigma(\"get_document_info\");\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: JSON.stringify(result)\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error getting document info: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n\n  // Selection Tool\n  server.tool(\n    \"get_selection\",\n    \"Get information about the current selection in Figma\",\n    {},\n    async () => {\n      try {\n        const result = await sendCommandToFigma(\"get_selection\");\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: JSON.stringify(result)\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error getting selection: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n\n  // Node Info Tool\n  server.tool(\n    \"get_node_info\",\n    \"Get detailed information about a specific node in Figma\",\n    {\n      nodeId: z.string().describe(\"The ID of the node to get information about\"),\n    },\n    async ({ nodeId }) => {\n      try {\n        const result = await sendCommandToFigma(\"get_node_info\", { nodeId });\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: JSON.stringify(filterFigmaNode(result))\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error getting node info: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n\n  // Nodes Info Tool\n  server.tool(\n    \"get_nodes_info\",\n    \"Get detailed information about multiple nodes in Figma\",\n    {\n      nodeIds: z.array(z.string()).describe(\"Array of node IDs to get information about\")\n    },\n    async ({ nodeIds }) => {\n      try {\n        const results = await Promise.all(\n          nodeIds.map(async (nodeId) => {\n            const result = await sendCommandToFigma('get_node_info', { nodeId });\n            return { nodeId, info: result };\n          })\n        );\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: JSON.stringify(results.map((result) => filterFigmaNode(result.info)))\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error getting nodes info: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Get Styles Tool\n  server.tool(\n    \"get_styles\",\n    \"Get all styles from the current Figma document\",\n    {},\n    async () => {\n      try {\n        const result = await sendCommandToFigma(\"get_styles\");\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: JSON.stringify(result)\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error getting styles: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n\n  // Get Local Components Tool\n  server.tool(\n    \"get_local_components\",\n    \"Get all local components from the Figma document\",\n    {},\n    async () => {\n      try {\n        const result = await sendCommandToFigma(\"get_local_components\");\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: JSON.stringify(result)\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error getting local components: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n\n  // Get Remote Components Tool\n  server.tool(\n    \"get_remote_components\",\n    \"Get available components from team libraries in Figma\",\n    {},\n    async () => {\n      try {\n        const result = await sendCommandToFigma(\"get_remote_components\");\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: JSON.stringify(result, null, 2)\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error getting remote components: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Text Node Scanning Tool\n  server.tool(\n    \"scan_text_nodes\",\n    \"Scan all text nodes in the selected Figma node\",\n    {\n      nodeId: z.string().describe(\"ID of the node to scan\"),\n    },\n    async ({ nodeId }) => {\n      try {\n        // Initial response to indicate we're starting the process\n        const initialStatus = {\n          type: \"text\" as const,\n          text: \"Starting text node scanning. This may take a moment for large designs...\",\n        };\n\n        // Use the plugin's scan_text_nodes function with chunking flag\n        const result = await sendCommandToFigma(\"scan_text_nodes\", {\n          nodeId,\n          useChunking: true,  // Enable chunking on the plugin side\n          chunkSize: 10       // Process 10 nodes at a time\n        });\n\n        // If the result indicates chunking was used, format the response accordingly\n        if (result && typeof result === 'object' && 'chunks' in result) {\n          const typedResult = result as {\n            success: boolean,\n            totalNodes: number,\n            processedNodes: number,\n            chunks: number,\n            textNodes: Array<any>\n          };\n\n          const summaryText = `\n          Scan completed:\n          - Found ${typedResult.totalNodes} text nodes\n          - Processed in ${typedResult.chunks} chunks\n          `;\n\n          return {\n            content: [\n              initialStatus,\n              {\n                type: \"text\" as const,\n                text: summaryText\n              },\n              {\n                type: \"text\" as const,\n                text: JSON.stringify(typedResult.textNodes, null, 2)\n              }\n            ],\n          };\n        }\n\n        // If chunking wasn't used or wasn't reported in the result format, return the result as is\n        return {\n          content: [\n            initialStatus,\n            {\n              type: \"text\",\n              text: JSON.stringify(result, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error scanning text nodes: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n\n  // Join Channel Tool\n  server.tool(\n    \"join_channel\",\n    \"Join a specific channel to communicate with Figma\",\n    {\n      channel: z.string().describe(\"The name of the channel to join\").default(\"\"),\n    },\n    async ({ channel }) => {\n      try {\n        if (!channel) {\n          // If no channel provided, ask the user for input\n          return {\n            content: [\n              {\n                type: \"text\",\n                text: \"Please provide a channel name to join:\",\n              },\n            ],\n            followUp: {\n              tool: \"join_channel\",\n              description: \"Join the specified channel\",\n            },\n          };\n        }\n\n        // Use joinChannel instead of sendCommandToFigma to ensure currentChannel is updated\n        await joinChannel(channel);\n        \n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Successfully joined channel: ${channel}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error joining channel: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n\n  // Export Node as Image Tool\n  server.tool(\n    \"export_node_as_image\",\n    \"Export a node as an image from Figma\",\n    {\n      nodeId: z.string().describe(\"The ID of the node to export\"),\n      format: z\n        .enum([\"PNG\", \"JPG\", \"SVG\", \"PDF\"])\n        .optional()\n        .describe(\"Export format\"),\n      scale: z.number().positive().optional().describe(\"Export scale\"),\n    },\n    async ({ nodeId, format, scale }) => {\n      try {\n        const result = await sendCommandToFigma(\"export_node_as_image\", {\n          nodeId,\n          format: format || \"PNG\",\n          scale: scale || 1,\n        });\n        const typedResult = result as { imageData: string; mimeType: string };\n\n        return {\n          content: [\n            {\n              type: \"image\",\n              data: typedResult.imageData,\n              mimeType: typedResult.mimeType || \"image/png\",\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error exporting node as image: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n}","/**\n * Utilidades para el procesamiento de nodos y respuestas de Figma\n */\n\n/**\n * Convierte un color RGBA a formato hexadecimal.\n * @param color - El color en formato RGBA con valores entre 0 y 1\n * @returns El color en formato hexadecimal (#RRGGBBAA)\n */\nexport function rgbaToHex(color: any): string {\n  const r = Math.round(color.r * 255);\n  const g = Math.round(color.g * 255);\n  const b = Math.round(color.b * 255);\n  const a = Math.round(color.a * 255);\n\n  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}${a === 255 ? '' : a.toString(16).padStart(2, '0')}`;\n}\n\n/**\n * Filtra un nodo de Figma para reducir su complejidad y tamaño.\n * Convierte colores a formato hexadecimal y elimina datos innecesarios.\n * @param node - El nodo de Figma a filtrar\n * @returns El nodo filtrado o null si debe ser ignorado\n */\nexport function filterFigmaNode(node: any) {\n  // Skip VECTOR type nodes\n  if (node.type === \"VECTOR\") {\n    return null;\n  }\n\n  const filtered: any = {\n    id: node.id,\n    name: node.name,\n    type: node.type,\n  };\n\n  if (node.fills && node.fills.length > 0) {\n    filtered.fills = node.fills.map((fill: any) => {\n      const processedFill = { ...fill };\n\n      // Remove boundVariables and imageRef\n      delete processedFill.boundVariables;\n      delete processedFill.imageRef;\n\n      // Process gradientStops if present\n      if (processedFill.gradientStops) {\n        processedFill.gradientStops = processedFill.gradientStops.map((stop: any) => {\n          const processedStop = { ...stop };\n          // Convert color to hex if present\n          if (processedStop.color) {\n            processedStop.color = rgbaToHex(processedStop.color);\n          }\n          // Remove boundVariables\n          delete processedStop.boundVariables;\n          return processedStop;\n        });\n      }\n\n      // Convert solid fill colors to hex\n      if (processedFill.color) {\n        processedFill.color = rgbaToHex(processedFill.color);\n      }\n\n      return processedFill;\n    });\n  }\n\n  if (node.strokes && node.strokes.length > 0) {\n    filtered.strokes = node.strokes.map((stroke: any) => {\n      const processedStroke = { ...stroke };\n      // Remove boundVariables\n      delete processedStroke.boundVariables;\n      // Convert color to hex if present\n      if (processedStroke.color) {\n        processedStroke.color = rgbaToHex(processedStroke.color);\n      }\n      return processedStroke;\n    });\n  }\n\n  if (node.cornerRadius !== undefined) {\n    filtered.cornerRadius = node.cornerRadius;\n  }\n\n  if (node.absoluteBoundingBox) {\n    filtered.absoluteBoundingBox = node.absoluteBoundingBox;\n  }\n\n  if (node.characters) {\n    filtered.characters = node.characters;\n  }\n\n  if (node.style) {\n    filtered.style = {\n      fontFamily: node.style.fontFamily,\n      fontStyle: node.style.fontStyle,\n      fontWeight: node.style.fontWeight,\n      fontSize: node.style.fontSize,\n      textAlignHorizontal: node.style.textAlignHorizontal,\n      letterSpacing: node.style.letterSpacing,\n      lineHeightPx: node.style.lineHeightPx\n    };\n  }\n\n  if (node.children) {\n    filtered.children = node.children\n      .map((child: any) => filterFigmaNode(child))\n      .filter((child: any) => child !== null); // Remove null children (VECTOR nodes)\n  }\n\n  return filtered;\n}\n\n/**\n * Procesa un nodo de respuesta de Figma para propósitos de logging.\n * @param result - El resultado a procesar\n * @returns El resultado original sin modificaciones\n */\nexport function processFigmaNodeResponse(result: unknown): any {\n  if (!result || typeof result !== \"object\") {\n    return result;\n  }\n\n  // Check if this looks like a node response\n  const resultObj = result as Record<string, unknown>;\n  if (\"id\" in resultObj && typeof resultObj.id === \"string\") {\n    // It appears to be a node response, log the details\n    console.info(\n      `Processed Figma node: ${resultObj.name || \"Unknown\"} (ID: ${resultObj.id})`\n    );\n\n    if (\"x\" in resultObj && \"y\" in resultObj) {\n      console.debug(`Node position: (${resultObj.x}, ${resultObj.y})`);\n    }\n\n    if (\"width\" in resultObj && \"height\" in resultObj) {\n      console.debug(`Node dimensions: ${resultObj.width}×${resultObj.height}`);\n    }\n  }\n\n  return result;\n}","import { z } from \"zod\";\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { sendCommandToFigma } from \"../utils/websocket\";\n\n/**\n * Register creation tools to the MCP server\n * This module contains tools for creating various shapes and elements in Figma\n * @param server - The MCP server instance\n */\nexport function registerCreationTools(server: McpServer): void {\n  // Create Rectangle Tool\n  server.tool(\n    \"create_rectangle\",\n    \"Create a new rectangle in Figma\",\n    {\n      x: z.number().describe(\"X position\"),\n      y: z.number().describe(\"Y position\"),\n      width: z.number().describe(\"Width of the rectangle\"),\n      height: z.number().describe(\"Height of the rectangle\"),\n      name: z.string().optional().describe(\"Optional name for the rectangle\"),\n      parentId: z\n        .string()\n        .optional()\n        .describe(\"Optional parent node ID to append the rectangle to\"),\n    },\n    async ({ x, y, width, height, name, parentId }) => {\n      try {\n        const result = await sendCommandToFigma(\"create_rectangle\", {\n          x,\n          y,\n          width,\n          height,\n          name: name || \"Rectangle\",\n          parentId,\n        });\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Created rectangle \"${JSON.stringify(result)}\"`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error creating rectangle: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n\n  // Create Frame Tool\n  server.tool(\n    \"create_frame\",\n    \"Create a new frame in Figma\",\n    {\n      x: z.number().describe(\"X position\"),\n      y: z.number().describe(\"Y position\"),\n      width: z.number().describe(\"Width of the frame\"),\n      height: z.number().describe(\"Height of the frame\"),\n      name: z.string().optional().describe(\"Optional name for the frame\"),\n      parentId: z\n        .string()\n        .optional()\n        .describe(\"Optional parent node ID to append the frame to\"),\n      fillColor: z\n        .object({\n          r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n          g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n          b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n          a: z\n            .number()\n            .min(0)\n            .max(1)\n            .optional()\n            .describe(\"Alpha component (0-1)\"),\n        })\n        .optional()\n        .describe(\"Fill color in RGBA format\"),\n      strokeColor: z\n        .object({\n          r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n          g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n          b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n          a: z\n            .number()\n            .min(0)\n            .max(1)\n            .optional()\n            .describe(\"Alpha component (0-1)\"),\n        })\n        .optional()\n        .describe(\"Stroke color in RGBA format\"),\n      strokeWeight: z.number().positive().optional().describe(\"Stroke weight\"),\n    },\n    async ({\n      x,\n      y,\n      width,\n      height,\n      name,\n      parentId,\n      fillColor,\n      strokeColor,\n      strokeWeight,\n    }) => {\n      try {\n        const result = await sendCommandToFigma(\"create_frame\", {\n          x,\n          y,\n          width,\n          height,\n          name: name || \"Frame\",\n          parentId,\n          fillColor: fillColor || { r: 1, g: 1, b: 1, a: 1 },\n          strokeColor: strokeColor,\n          strokeWeight: strokeWeight,\n        });\n        const typedResult = result as { name: string; id: string };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Created frame \"${typedResult.name}\" with ID: ${typedResult.id}. Use the ID as the parentId to appendChild inside this frame.`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error creating frame: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n\n  // Create Text Tool\n  server.tool(\n    \"create_text\",\n    \"Create a new text element in Figma\",\n    {\n      x: z.number().describe(\"X position\"),\n      y: z.number().describe(\"Y position\"),\n      text: z.string().describe(\"Text content\"),\n      fontSize: z.number().optional().describe(\"Font size (default: 14)\"),\n      fontWeight: z\n        .number()\n        .optional()\n        .describe(\"Font weight (e.g., 400 for Regular, 700 for Bold)\"),\n      fontColor: z\n        .object({\n          r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n          g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n          b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n          a: z\n            .number()\n            .min(0)\n            .max(1)\n            .optional()\n            .describe(\"Alpha component (0-1)\"),\n        })\n        .optional()\n        .describe(\"Font color in RGBA format\"),\n      name: z\n        .string()\n        .optional()\n        .describe(\"Optional name for the text node by default following text\"),\n      parentId: z\n        .string()\n        .optional()\n        .describe(\"Optional parent node ID to append the text to\"),\n    },\n    async ({ x, y, text, fontSize, fontWeight, fontColor, name, parentId }) => {\n      try {\n        const result = await sendCommandToFigma(\"create_text\", {\n          x,\n          y,\n          text,\n          fontSize: fontSize || 14,\n          fontWeight: fontWeight || 400,\n          fontColor: fontColor || { r: 0, g: 0, b: 0, a: 1 },\n          name: name || \"Text\",\n          parentId,\n        });\n        const typedResult = result as { name: string; id: string };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Created text \"${typedResult.name}\" with ID: ${typedResult.id}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error creating text: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n\n  // Create Ellipse Tool\n  server.tool(\n    \"create_ellipse\",\n    \"Create a new ellipse in Figma\",\n    {\n      x: z.number().describe(\"X position\"),\n      y: z.number().describe(\"Y position\"),\n      width: z.number().describe(\"Width of the ellipse\"),\n      height: z.number().describe(\"Height of the ellipse\"),\n      name: z.string().optional().describe(\"Optional name for the ellipse\"),\n      parentId: z.string().optional().describe(\"Optional parent node ID to append the ellipse to\"),\n      fillColor: z\n        .object({\n          r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n          g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n          b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n          a: z.number().min(0).max(1).optional().describe(\"Alpha component (0-1)\"),\n        })\n        .optional()\n        .describe(\"Fill color in RGBA format\"),\n      strokeColor: z\n        .object({\n          r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n          g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n          b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n          a: z.number().min(0).max(1).optional().describe(\"Alpha component (0-1)\"),\n        })\n        .optional()\n        .describe(\"Stroke color in RGBA format\"),\n      strokeWeight: z.number().positive().optional().describe(\"Stroke weight\"),\n    },\n    async ({ x, y, width, height, name, parentId, fillColor, strokeColor, strokeWeight }) => {\n      try {\n        const result = await sendCommandToFigma(\"create_ellipse\", {\n          x,\n          y,\n          width,\n          height,\n          name: name || \"Ellipse\",\n          parentId,\n          fillColor,\n          strokeColor,\n          strokeWeight,\n        });\n        \n        const typedResult = result as { id: string, name: string };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Created ellipse with ID: ${typedResult.id}`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error creating ellipse: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Create Polygon Tool\n  server.tool(\n    \"create_polygon\",\n    \"Create a new polygon in Figma\",\n    {\n      x: z.number().describe(\"X position\"),\n      y: z.number().describe(\"Y position\"),\n      width: z.number().describe(\"Width of the polygon\"),\n      height: z.number().describe(\"Height of the polygon\"),\n      sides: z.number().min(3).optional().describe(\"Number of sides (default: 6)\"),\n      name: z.string().optional().describe(\"Optional name for the polygon\"),\n      parentId: z.string().optional().describe(\"Optional parent node ID to append the polygon to\"),\n      fillColor: z\n        .object({\n          r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n          g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n          b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n          a: z.number().min(0).max(1).optional().describe(\"Alpha component (0-1)\"),\n        })\n        .optional()\n        .describe(\"Fill color in RGBA format\"),\n      strokeColor: z\n        .object({\n          r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n          g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n          b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n          a: z.number().min(0).max(1).optional().describe(\"Alpha component (0-1)\"),\n        })\n        .optional()\n        .describe(\"Stroke color in RGBA format\"),\n      strokeWeight: z.number().positive().optional().describe(\"Stroke weight\"),\n    },\n    async ({ x, y, width, height, sides, name, parentId, fillColor, strokeColor, strokeWeight }) => {\n      try {\n        const result = await sendCommandToFigma(\"create_polygon\", {\n          x,\n          y,\n          width,\n          height,\n          sides: sides || 6,\n          name: name || \"Polygon\",\n          parentId,\n          fillColor,\n          strokeColor,\n          strokeWeight,\n        });\n        \n        const typedResult = result as { id: string, name: string };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Created polygon with ID: ${typedResult.id} and ${sides || 6} sides`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error creating polygon: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Create Star Tool\n  server.tool(\n    \"create_star\",\n    \"Create a new star in Figma\",\n    {\n      x: z.number().describe(\"X position\"),\n      y: z.number().describe(\"Y position\"),\n      width: z.number().describe(\"Width of the star\"),\n      height: z.number().describe(\"Height of the star\"),\n      points: z.number().min(3).optional().describe(\"Number of points (default: 5)\"),\n      innerRadius: z.number().min(0.01).max(0.99).optional().describe(\"Inner radius ratio (0.01-0.99, default: 0.5)\"),\n      name: z.string().optional().describe(\"Optional name for the star\"),\n      parentId: z.string().optional().describe(\"Optional parent node ID to append the star to\"),\n      fillColor: z\n        .object({\n          r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n          g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n          b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n          a: z.number().min(0).max(1).optional().describe(\"Alpha component (0-1)\"),\n        })\n        .optional()\n        .describe(\"Fill color in RGBA format\"),\n      strokeColor: z\n        .object({\n          r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n          g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n          b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n          a: z.number().min(0).max(1).optional().describe(\"Alpha component (0-1)\"),\n        })\n        .optional()\n        .describe(\"Stroke color in RGBA format\"),\n      strokeWeight: z.number().positive().optional().describe(\"Stroke weight\"),\n    },\n    async ({ x, y, width, height, points, innerRadius, name, parentId, fillColor, strokeColor, strokeWeight }) => {\n      try {\n        const result = await sendCommandToFigma(\"create_star\", {\n          x,\n          y,\n          width,\n          height,\n          points: points || 5,\n          innerRadius: innerRadius || 0.5,\n          name: name || \"Star\",\n          parentId,\n          fillColor,\n          strokeColor,\n          strokeWeight,\n        });\n        \n        const typedResult = result as { id: string, name: string };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Created star with ID: ${typedResult.id}, ${points || 5} points, and inner radius ratio of ${innerRadius || 0.5}`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error creating star: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Group Nodes Tool\n  server.tool(\n    \"group_nodes\",\n    \"Group nodes in Figma\",\n    {\n      nodeIds: z.array(z.string()).describe(\"Array of IDs of the nodes to group\"),\n      name: z.string().optional().describe(\"Optional name for the group\")\n    },\n    async ({ nodeIds, name }) => {\n      try {\n        const result = await sendCommandToFigma(\"group_nodes\", { \n          nodeIds, \n          name \n        });\n        \n        const typedResult = result as { \n          id: string, \n          name: string, \n          type: string, \n          children: Array<{ id: string, name: string, type: string }> \n        };\n        \n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Nodes successfully grouped into \"${typedResult.name}\" with ID: ${typedResult.id}. The group contains ${typedResult.children.length} elements.`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error grouping nodes: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Ungroup Nodes Tool\n  server.tool(\n    \"ungroup_nodes\",\n    \"Ungroup nodes in Figma\",\n    {\n      nodeId: z.string().describe(\"ID of the node (group or frame) to ungroup\"),\n    },\n    async ({ nodeId }) => {\n      try {\n        const result = await sendCommandToFigma(\"ungroup_nodes\", { nodeId });\n        \n        const typedResult = result as { \n          success: boolean, \n          ungroupedCount: number, \n          items: Array<{ id: string, name: string, type: string }> \n        };\n        \n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Node successfully ungrouped. ${typedResult.ungroupedCount} elements were released.`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error ungrouping node: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Clone Node Tool\n  server.tool(\n    \"clone_node\",\n    \"Clone an existing node in Figma\",\n    {\n      nodeId: z.string().describe(\"The ID of the node to clone\"),\n      x: z.number().optional().describe(\"New X position for the clone\"),\n      y: z.number().optional().describe(\"New Y position for the clone\")\n    },\n    async ({ nodeId, x, y }) => {\n      try {\n        const result = await sendCommandToFigma('clone_node', { nodeId, x, y });\n        const typedResult = result as { name: string, id: string };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Cloned node \"${typedResult.name}\" with new ID: ${typedResult.id}${x !== undefined && y !== undefined ? ` at position (${x}, ${y})` : ''}`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error cloning node: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Insert Child Tool\n  server.tool(\n    \"insert_child\",\n    \"Insert a child node inside a parent node in Figma\",\n    {\n      parentId: z.string().describe(\"ID of the parent node where the child will be inserted\"),\n      childId: z.string().describe(\"ID of the child node to insert\"),\n      index: z.number().optional().describe(\"Optional index where to insert the child (if not specified, it will be added at the end)\")\n    },\n    async ({ parentId, childId, index }) => {\n      try {\n        const result = await sendCommandToFigma(\"insert_child\", { \n          parentId, \n          childId,\n          index \n        });\n        \n        const typedResult = result as { \n          parentId: string,\n          childId: string,\n          index: number,\n          success: boolean\n        };\n        \n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Child node with ID: ${typedResult.childId} successfully inserted into parent node with ID: ${typedResult.parentId}${index !== undefined ? ` at position ${typedResult.index}` : ''}.`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error inserting child node: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Flatten Node Tool\n  server.tool(\n    \"flatten_node\",\n    \"Flatten a node in Figma (e.g., for boolean operations or converting to path)\",\n    {\n      nodeId: z.string().describe(\"ID of the node to flatten\"),\n    },\n    async ({ nodeId }) => {\n      try {\n        const result = await sendCommandToFigma(\"flatten_node\", { nodeId });\n        \n        const typedResult = result as { \n          id: string, \n          name: string, \n          type: string \n        };\n        \n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Node \"${typedResult.name}\" flattened successfully. The new node has ID: ${typedResult.id} and is of type ${typedResult.type}.`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error flattening node: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n}","import { z } from \"zod\";\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { sendCommandToFigma } from \"../utils/websocket\";\nimport { applyColorDefaults, applyDefault, FIGMA_DEFAULTS } from \"../utils/defaults\";\nimport { Color } from \"../types/color\";\n\n/**\n * Register modification tools to the MCP server\n * This module contains tools for modifying existing elements in Figma\n * @param server - The MCP server instance\n */\nexport function registerModificationTools(server: McpServer): void {\n  // Set Fill Color Tool\n  server.tool(\n    \"set_fill_color\",\n    \"Set the fill color of a node in Figma. Alpha component defaults to 1 (fully opaque) if not specified. Use alpha 0 for fully transparent.\",\n    {\n      nodeId: z.string().describe(\"The ID of the node to modify\"),\n      r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n      g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n      b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n      a: z.number().min(0).max(1).optional().describe(\"Alpha component (0-1, defaults to 1 if not specified)\"),\n    },\n    async ({ nodeId, r, g, b, a }) => {\n      try {\n        // Additional validation: Ensure RGB values are provided (they should not be undefined)\n        if (r === undefined || g === undefined || b === undefined) {\n          throw new Error(\"RGB components (r, g, b) are required and cannot be undefined\");\n        }\n        \n        // Apply default values safely - preserves opacity 0 for transparency\n        const colorInput: Color = { r, g, b, a };\n        const colorWithDefaults = applyColorDefaults(colorInput);\n        \n        const result = await sendCommandToFigma(\"set_fill_color\", {\n          nodeId,\n          color: colorWithDefaults,\n        });\n        const typedResult = result as { name: string };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Set fill color of node \"${typedResult.name}\" to RGBA(${r}, ${g}, ${b}, ${colorWithDefaults.a})`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error setting fill color: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n\n  // Set Stroke Color Tool\n  server.tool(\n    \"set_stroke_color\",\n    \"Set the stroke color of a node in Figma (defaults: opacity 1, weight 1)\",\n    {\n      nodeId: z.string().describe(\"The ID of the node to modify\"),\n      r: z.number().min(0).max(1).describe(\"Red component (0-1)\"),\n      g: z.number().min(0).max(1).describe(\"Green component (0-1)\"),\n      b: z.number().min(0).max(1).describe(\"Blue component (0-1)\"),\n      a: z.number().min(0).max(1).optional().describe(\"Alpha component (0-1)\"),\n      strokeWeight: z.number().positive().optional().describe(\"Stroke weight\"),\n    },\n    async ({ nodeId, r, g, b, a, strokeWeight }) => {\n      try {\n\n        if (r === undefined || g === undefined || b === undefined) {\n          throw new Error(\"RGB components (r, g, b) are required and cannot be undefined\");\n        }\n        \n        const colorInput: Color = { r, g, b, a };\n        const colorWithDefaults = applyColorDefaults(colorInput);\n        \n        const strokeWeightWithDefault = applyDefault(strokeWeight, FIGMA_DEFAULTS.stroke.weight);\n        \n        const result = await sendCommandToFigma(\"set_stroke_color\", {\n          nodeId,\n          color: colorWithDefaults,\n          strokeWeight: strokeWeightWithDefault,\n        });\n        const typedResult = result as { name: string };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Set stroke color of node \"${typedResult.name}\" to RGBA(${r}, ${g}, ${b}, ${colorWithDefaults.a}) with weight ${strokeWeightWithDefault}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error setting stroke color: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n\n  // Move Node Tool\n  server.tool(\n    \"move_node\",\n    \"Move a node to a new position in Figma\",\n    {\n      nodeId: z.string().describe(\"The ID of the node to move\"),\n      x: z.number().describe(\"New X position\"),\n      y: z.number().describe(\"New Y position\"),\n    },\n    async ({ nodeId, x, y }) => {\n      try {\n        const result = await sendCommandToFigma(\"move_node\", { nodeId, x, y });\n        const typedResult = result as { name: string };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Moved node \"${typedResult.name}\" to position (${x}, ${y})`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error moving node: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n\n  // Resize Node Tool\n  server.tool(\n    \"resize_node\",\n    \"Resize a node in Figma\",\n    {\n      nodeId: z.string().describe(\"The ID of the node to resize\"),\n      width: z.number().positive().describe(\"New width\"),\n      height: z.number().positive().describe(\"New height\"),\n    },\n    async ({ nodeId, width, height }) => {\n      try {\n        const result = await sendCommandToFigma(\"resize_node\", {\n          nodeId,\n          width,\n          height,\n        });\n        const typedResult = result as { name: string };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Resized node \"${typedResult.name}\" to width ${width} and height ${height}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error resizing node: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n\n  // Delete Node Tool\n  server.tool(\n    \"delete_node\",\n    \"Delete a node from Figma\",\n    {\n      nodeId: z.string().describe(\"The ID of the node to delete\"),\n    },\n    async ({ nodeId }) => {\n      try {\n        await sendCommandToFigma(\"delete_node\", { nodeId });\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Deleted node with ID: ${nodeId}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error deleting node: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n\n  // Set Corner Radius Tool\n  server.tool(\n    \"set_corner_radius\",\n    \"Set the corner radius of a node in Figma\",\n    {\n      nodeId: z.string().describe(\"The ID of the node to modify\"),\n      radius: z.number().min(0).describe(\"Corner radius value\"),\n      corners: z\n        .array(z.boolean())\n        .length(4)\n        .optional()\n        .describe(\n          \"Optional array of 4 booleans to specify which corners to round [topLeft, topRight, bottomRight, bottomLeft]\"\n        ),\n    },\n    async ({ nodeId, radius, corners }) => {\n      try {\n        const result = await sendCommandToFigma(\"set_corner_radius\", {\n          nodeId,\n          radius,\n          corners: corners || [true, true, true, true],\n        });\n        const typedResult = result as { name: string };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Set corner radius of node \"${typedResult.name}\" to ${radius}px`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error setting corner radius: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n\n  // Auto Layout Tool\n  server.tool(\n    \"set_auto_layout\",\n    \"Configure auto layout properties for a node in Figma\",\n    {\n      nodeId: z.string().describe(\"The ID of the node to configure auto layout\"),\n      layoutMode: z.enum([\"HORIZONTAL\", \"VERTICAL\", \"NONE\"]).describe(\"Layout direction\"),\n      paddingTop: z.number().optional().describe(\"Top padding in pixels\"),\n      paddingBottom: z.number().optional().describe(\"Bottom padding in pixels\"),\n      paddingLeft: z.number().optional().describe(\"Left padding in pixels\"),\n      paddingRight: z.number().optional().describe(\"Right padding in pixels\"),\n      itemSpacing: z.number().optional().describe(\"Spacing between items in pixels\"),\n      primaryAxisAlignItems: z.enum([\"MIN\", \"CENTER\", \"MAX\", \"SPACE_BETWEEN\"]).optional().describe(\"Alignment along primary axis\"),\n      counterAxisAlignItems: z.enum([\"MIN\", \"CENTER\", \"MAX\"]).optional().describe(\"Alignment along counter axis\"),\n      layoutWrap: z.enum([\"WRAP\", \"NO_WRAP\"]).optional().describe(\"Whether items wrap to new lines\"),\n      strokesIncludedInLayout: z.boolean().optional().describe(\"Whether strokes are included in layout calculations\")\n    },\n    async ({ nodeId, layoutMode, paddingTop, paddingBottom, paddingLeft, paddingRight, \n             itemSpacing, primaryAxisAlignItems, counterAxisAlignItems, layoutWrap, strokesIncludedInLayout }) => {\n      try {\n        const result = await sendCommandToFigma(\"set_auto_layout\", { \n          nodeId, \n          layoutMode, \n          paddingTop, \n          paddingBottom, \n          paddingLeft, \n          paddingRight, \n          itemSpacing, \n          primaryAxisAlignItems, \n          counterAxisAlignItems, \n          layoutWrap, \n          strokesIncludedInLayout \n        });\n        \n        const typedResult = result as { name: string };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Applied auto layout to node \"${typedResult.name}\" with mode: ${layoutMode}`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error setting auto layout: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Set Effects Tool\n  server.tool(\n    \"set_effects\",\n    \"Set the visual effects of a node in Figma\",\n    {\n      nodeId: z.string().describe(\"The ID of the node to modify\"),\n      effects: z.array(\n        z.object({\n          type: z.enum([\"DROP_SHADOW\", \"INNER_SHADOW\", \"LAYER_BLUR\", \"BACKGROUND_BLUR\"]).describe(\"Effect type\"),\n          color: z.object({\n            r: z.number().min(0).max(1).describe(\"Red (0-1)\"),\n            g: z.number().min(0).max(1).describe(\"Green (0-1)\"),\n            b: z.number().min(0).max(1).describe(\"Blue (0-1)\"),\n            a: z.number().min(0).max(1).describe(\"Alpha (0-1)\")\n          }).optional().describe(\"Effect color (for shadows)\"),\n          offset: z.object({\n            x: z.number().describe(\"X offset\"),\n            y: z.number().describe(\"Y offset\")\n          }).optional().describe(\"Offset (for shadows)\"),\n          radius: z.number().optional().describe(\"Effect radius\"),\n          spread: z.number().optional().describe(\"Shadow spread (for shadows)\"),\n          visible: z.boolean().optional().describe(\"Whether the effect is visible\"),\n          blendMode: z.string().optional().describe(\"Blend mode\")\n        })\n      ).describe(\"Array of effects to apply\")\n    },\n    async ({ nodeId, effects }) => {\n      try {\n        const result = await sendCommandToFigma(\"set_effects\", {\n          nodeId,\n          effects\n        });\n        \n        const typedResult = result as { name: string, effects: any[] };\n        \n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Successfully applied ${effects.length} effect(s) to node \"${typedResult.name}\"`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error setting effects: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Set Effect Style ID Tool\n  server.tool(\n    \"set_effect_style_id\",\n    \"Apply an effect style to a node in Figma\",\n    {\n      nodeId: z.string().describe(\"The ID of the node to modify\"),\n      effectStyleId: z.string().describe(\"The ID of the effect style to apply\")\n    },\n    async ({ nodeId, effectStyleId }) => {\n      try {\n        const result = await sendCommandToFigma(\"set_effect_style_id\", {\n          nodeId,\n          effectStyleId\n        });\n        \n        const typedResult = result as { name: string, effectStyleId: string };\n        \n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Successfully applied effect style to node \"${typedResult.name}\"`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error setting effect style: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n}","import { Color, ColorWithDefaults } from '../types/color';\n\nexport const FIGMA_DEFAULTS = {\n  color: {\n    opacity: 1,\n  },\n  stroke: {\n    weight: 1,\n  }\n} as const;\n\nexport function applyDefault<T>(value: T | undefined, defaultValue: T): T {\n  return value !== undefined ? value : defaultValue;\n}\n\nexport function applyColorDefaults(color: Color): ColorWithDefaults {\n  return {\n    r: color.r,\n    g: color.g,\n    b: color.b,\n    a: applyDefault(color.a, FIGMA_DEFAULTS.color.opacity)\n  };\n}","import { z } from \"zod\";\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { sendCommandToFigma } from \"../utils/websocket\";\n\n/**\n * Register text-related tools to the MCP server\n * This module contains tools for working with text elements in Figma\n * @param server - The MCP server instance\n */\nexport function registerTextTools(server: McpServer): void {\n  // Set Text Content Tool\n  server.tool(\n    \"set_text_content\",\n    \"Set the text content of an existing text node in Figma\",\n    {\n      nodeId: z.string().describe(\"The ID of the text node to modify\"),\n      text: z.string().describe(\"New text content\"),\n    },\n    async ({ nodeId, text }) => {\n      try {\n        const result = await sendCommandToFigma(\"set_text_content\", {\n          nodeId,\n          text,\n        });\n        const typedResult = result as { name: string };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Updated text content of node \"${typedResult.name}\" to \"${text}\"`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error setting text content: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n\n  // Set Multiple Text Contents Tool\n  server.tool(\n    \"set_multiple_text_contents\",\n    \"Set multiple text contents parallelly in a node\",\n    {\n      nodeId: z\n        .string()\n        .describe(\"The ID of the node containing the text nodes to replace\"),\n      text: z\n        .array(\n          z.object({\n            nodeId: z.string().describe(\"The ID of the text node\"),\n            text: z.string().describe(\"The replacement text\"),\n          })\n        )\n        .describe(\"Array of text node IDs and their replacement texts\"),\n    },\n    async ({ nodeId, text }, extra) => {\n      try {\n        if (!text || text.length === 0) {\n          return {\n            content: [\n              {\n                type: \"text\",\n                text: \"No text provided\",\n              },\n            ],\n          };\n        }\n\n        // Initial response to indicate we're starting the process\n        const initialStatus = {\n          type: \"text\" as const,\n          text: `Starting text replacement for ${text.length} nodes. This will be processed in batches of 5...`,\n        };\n\n        // Track overall progress\n        let totalProcessed = 0;\n        const totalToProcess = text.length;\n\n        // Use the plugin's set_multiple_text_contents function with chunking\n        const result = await sendCommandToFigma(\"set_multiple_text_contents\", {\n          nodeId,\n          text,\n        });\n\n        // Cast the result to a specific type to work with it safely\n        interface TextReplaceResult {\n          success: boolean;\n          nodeId: string;\n          replacementsApplied?: number;\n          replacementsFailed?: number;\n          totalReplacements?: number;\n          completedInChunks?: number;\n          results?: Array<{\n            success: boolean;\n            nodeId: string;\n            error?: string;\n            originalText?: string;\n            translatedText?: string;\n          }>;\n        }\n\n        const typedResult = result as TextReplaceResult;\n\n        // Format the results for display\n        const success = typedResult.replacementsApplied && typedResult.replacementsApplied > 0;\n        const progressText = `\n        Text replacement completed:\n        - ${typedResult.replacementsApplied || 0} of ${totalToProcess} successfully updated\n        - ${typedResult.replacementsFailed || 0} failed\n        - Processed in ${typedResult.completedInChunks || 1} batches\n        `;\n\n        // Detailed results\n        const detailedResults = typedResult.results || [];\n        const failedResults = detailedResults.filter(item => !item.success);\n\n        // Create the detailed part of the response\n        let detailedResponse = \"\";\n        if (failedResults.length > 0) {\n          detailedResponse = `\\n\\nNodes that failed:\\n${failedResults.map(item =>\n            `- ${item.nodeId}: ${item.error || \"Unknown error\"}`\n          ).join('\\n')}`;\n        }\n\n        return {\n          content: [\n            initialStatus,\n            {\n              type: \"text\" as const,\n              text: progressText + detailedResponse,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error setting multiple text contents: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n\n  // Set Font Name Tool\n  server.tool(\n    \"set_font_name\",\n    \"Set the font name and style of a text node in Figma\",\n    {\n      nodeId: z.string().describe(\"The ID of the text node to modify\"),\n      family: z.string().describe(\"Font family name\"),\n      style: z.string().optional().describe(\"Font style (e.g., 'Regular', 'Bold', 'Italic')\"),\n    },\n    async ({ nodeId, family, style }) => {\n      try {\n        const result = await sendCommandToFigma(\"set_font_name\", {\n          nodeId,\n          family,\n          style\n        });\n        const typedResult = result as { name: string, fontName: { family: string, style: string } };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Updated font of node \"${typedResult.name}\" to ${typedResult.fontName.family} ${typedResult.fontName.style}`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error setting font name: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Set Font Size Tool\n  server.tool(\n    \"set_font_size\",\n    \"Set the font size of a text node in Figma\",\n    {\n      nodeId: z.string().describe(\"The ID of the text node to modify\"),\n      fontSize: z.number().positive().describe(\"Font size in pixels\"),\n    },\n    async ({ nodeId, fontSize }) => {\n      try {\n        const result = await sendCommandToFigma(\"set_font_size\", {\n          nodeId,\n          fontSize\n        });\n        const typedResult = result as { name: string, fontSize: number };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Updated font size of node \"${typedResult.name}\" to ${typedResult.fontSize}px`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error setting font size: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Set Font Weight Tool\n  server.tool(\n    \"set_font_weight\",\n    \"Set the font weight of a text node in Figma\",\n    {\n      nodeId: z.string().describe(\"The ID of the text node to modify\"),\n      weight: z.number().describe(\"Font weight (100, 200, 300, 400, 500, 600, 700, 800, 900)\"),\n    },\n    async ({ nodeId, weight }) => {\n      try {\n        const result = await sendCommandToFigma(\"set_font_weight\", {\n          nodeId,\n          weight\n        });\n        const typedResult = result as { name: string, fontName: { family: string, style: string }, weight: number };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Updated font weight of node \"${typedResult.name}\" to ${typedResult.weight} (${typedResult.fontName.style})`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error setting font weight: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Set Letter Spacing Tool\n  server.tool(\n    \"set_letter_spacing\",\n    \"Set the letter spacing of a text node in Figma\",\n    {\n      nodeId: z.string().describe(\"The ID of the text node to modify\"),\n      letterSpacing: z.number().describe(\"Letter spacing value\"),\n      unit: z.enum([\"PIXELS\", \"PERCENT\"]).optional().describe(\"Unit type (PIXELS or PERCENT)\"),\n    },\n    async ({ nodeId, letterSpacing, unit }) => {\n      try {\n        const result = await sendCommandToFigma(\"set_letter_spacing\", {\n          nodeId,\n          letterSpacing,\n          unit: unit || \"PIXELS\"\n        });\n        const typedResult = result as { name: string, letterSpacing: { value: number, unit: string } };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Updated letter spacing of node \"${typedResult.name}\" to ${typedResult.letterSpacing.value} ${typedResult.letterSpacing.unit}`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error setting letter spacing: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Set Line Height Tool\n  server.tool(\n    \"set_line_height\",\n    \"Set the line height of a text node in Figma\",\n    {\n      nodeId: z.string().describe(\"The ID of the text node to modify\"),\n      lineHeight: z.number().describe(\"Line height value\"),\n      unit: z.enum([\"PIXELS\", \"PERCENT\", \"AUTO\"]).optional().describe(\"Unit type (PIXELS, PERCENT, or AUTO)\"),\n    },\n    async ({ nodeId, lineHeight, unit }) => {\n      try {\n        const result = await sendCommandToFigma(\"set_line_height\", {\n          nodeId,\n          lineHeight,\n          unit: unit || \"PIXELS\"\n        });\n        const typedResult = result as { name: string, lineHeight: { value: number, unit: string } };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Updated line height of node \"${typedResult.name}\" to ${typedResult.lineHeight.value} ${typedResult.lineHeight.unit}`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error setting line height: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Set Paragraph Spacing Tool\n  server.tool(\n    \"set_paragraph_spacing\",\n    \"Set the paragraph spacing of a text node in Figma\",\n    {\n      nodeId: z.string().describe(\"The ID of the text node to modify\"),\n      paragraphSpacing: z.number().describe(\"Paragraph spacing value in pixels\"),\n    },\n    async ({ nodeId, paragraphSpacing }) => {\n      try {\n        const result = await sendCommandToFigma(\"set_paragraph_spacing\", {\n          nodeId,\n          paragraphSpacing\n        });\n        const typedResult = result as { name: string, paragraphSpacing: number };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Updated paragraph spacing of node \"${typedResult.name}\" to ${typedResult.paragraphSpacing}px`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error setting paragraph spacing: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Set Text Case Tool\n  server.tool(\n    \"set_text_case\",\n    \"Set the text case of a text node in Figma\",\n    {\n      nodeId: z.string().describe(\"The ID of the text node to modify\"),\n      textCase: z.enum([\"ORIGINAL\", \"UPPER\", \"LOWER\", \"TITLE\"]).describe(\"Text case type\"),\n    },\n    async ({ nodeId, textCase }) => {\n      try {\n        const result = await sendCommandToFigma(\"set_text_case\", {\n          nodeId,\n          textCase\n        });\n        const typedResult = result as { name: string, textCase: string };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Updated text case of node \"${typedResult.name}\" to ${typedResult.textCase}`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error setting text case: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Set Text Decoration Tool\n  server.tool(\n    \"set_text_decoration\",\n    \"Set the text decoration of a text node in Figma\",\n    {\n      nodeId: z.string().describe(\"The ID of the text node to modify\"),\n      textDecoration: z.enum([\"NONE\", \"UNDERLINE\", \"STRIKETHROUGH\"]).describe(\"Text decoration type\"),\n    },\n    async ({ nodeId, textDecoration }) => {\n      try {\n        const result = await sendCommandToFigma(\"set_text_decoration\", {\n          nodeId,\n          textDecoration\n        });\n        const typedResult = result as { name: string, textDecoration: string };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Updated text decoration of node \"${typedResult.name}\" to ${typedResult.textDecoration}`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error setting text decoration: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Get Styled Text Segments Tool\n  server.tool(\n    \"get_styled_text_segments\",\n    \"Get text segments with specific styling in a text node\",\n    {\n      nodeId: z.string().describe(\"The ID of the text node to analyze\"),\n      property: z.enum([\n        \"fillStyleId\", \n        \"fontName\", \n        \"fontSize\", \n        \"textCase\", \n        \"textDecoration\", \n        \"textStyleId\", \n        \"fills\", \n        \"letterSpacing\", \n        \"lineHeight\", \n        \"fontWeight\"\n      ]).describe(\"The style property to analyze segments by\"),\n    },\n    async ({ nodeId, property }) => {\n      try {\n        const result = await sendCommandToFigma(\"get_styled_text_segments\", {\n          nodeId,\n          property\n        });\n        \n        return {\n          content: [\n            {\n              type: \"text\",\n              text: JSON.stringify(result, null, 2)\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error getting styled text segments: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n\n  // Load Font Async Tool\n  server.tool(\n    \"load_font_async\",\n    \"Load a font asynchronously in Figma\",\n    {\n      family: z.string().describe(\"Font family name\"),\n      style: z.string().optional().describe(\"Font style (e.g., 'Regular', 'Bold', 'Italic')\"),\n    },\n    async ({ family, style }) => {\n      try {\n        const result = await sendCommandToFigma(\"load_font_async\", {\n          family,\n          style: style || \"Regular\"\n        });\n        const typedResult = result as { success: boolean, family: string, style: string, message: string };\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: typedResult.message || `Loaded font ${family} ${style || \"Regular\"}`\n            }\n          ]\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error loading font: ${error instanceof Error ? error.message : String(error)}`\n            }\n          ]\n        };\n      }\n    }\n  );\n}","import { z } from \"zod\";\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { sendCommandToFigma } from \"../utils/websocket\";\n\n/**\n * Register component-related tools to the MCP server\n * This module contains tools for working with components in Figma\n * @param server - The MCP server instance\n */\nexport function registerComponentTools(server: McpServer): void {\n  // Create Component Instance Tool\n  server.tool(\n    \"create_component_instance\",\n    \"Create an instance of a component in Figma\",\n    {\n      componentKey: z.string().describe(\"Key of the component to instantiate\"),\n      x: z.number().describe(\"X position\"),\n      y: z.number().describe(\"Y position\"),\n    },\n    async ({ componentKey, x, y }) => {\n      try {\n        const result = await sendCommandToFigma(\"create_component_instance\", {\n          componentKey,\n          x,\n          y,\n        });\n        const typedResult = result as any;\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: JSON.stringify(typedResult),\n            }\n          ]\n        }\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: `Error creating component instance: ${error instanceof Error ? error.message : String(error)}`,\n            },\n          ],\n        };\n      }\n    }\n  );\n}","import { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { registerDocumentTools } from \"./document-tools\";\nimport { registerCreationTools } from \"./creation-tools\";\nimport { registerModificationTools } from \"./modification-tools\";\nimport { registerTextTools } from \"./text-tools\";\nimport { registerComponentTools } from \"./component-tools\";\n\n/**\n * Register all Figma tools to the MCP server\n * @param server - The MCP server instance\n */\nexport function registerTools(server: McpServer): void {\n  // Register all tool categories\n  registerDocumentTools(server);\n  registerCreationTools(server);\n  registerModificationTools(server);\n  registerTextTools(server);\n  registerComponentTools(server);\n}\n\n// Export all tool registration functions for individual usage if needed\nexport {\n  registerDocumentTools,\n  registerCreationTools,\n  registerModificationTools,\n  registerTextTools,\n  registerComponentTools\n};","/**\n * This module contains all the prompts used by the Figma MCP server.\n * Prompts provide guidance to Claude on how to work with Figma designs effectively.\n */\n\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\n\n/**\n * Register all prompts with the MCP server\n * @param server - The MCP server instance\n */\nexport function registerPrompts(server: McpServer): void {\n  // Design Strategy Prompt\n  server.prompt(\n    \"design_strategy\",\n    \"Best practices for working with Figma designs\",\n    (extra) => {\n      return {\n        messages: [\n          {\n            role: \"assistant\",\n            content: {\n              type: \"text\",\n              text: `When working with Figma designs, follow these best practices:\n\n1. Start with Document Structure:\n   - First use get_document_info() to understand the current document\n   - Plan your layout hierarchy before creating elements\n   - Create a main container frame for each screen/section\n\n2. Naming Conventions:\n   - Use descriptive, semantic names for all elements\n   - Follow a consistent naming pattern (e.g., \"Login Screen\", \"Logo Container\", \"Email Input\")\n   - Group related elements with meaningful names\n\n3. Layout Hierarchy:\n   - Create parent frames first, then add child elements\n   - For forms/login screens:\n     * Start with the main screen container frame\n     * Create a logo container at the top\n     * Group input fields in their own containers\n     * Place action buttons (login, submit) after inputs\n     * Add secondary elements (forgot password, signup links) last\n\n4. Input Fields Structure:\n   - Create a container frame for each input field\n   - Include a label text above or inside the input\n   - Group related inputs (e.g., username/password) together\n\n5. Element Creation:\n   - Use create_frame() for containers and input fields\n   - Use create_text() for labels, buttons text, and links\n   - Set appropriate colors and styles:\n     * Use fillColor for backgrounds\n     * Use strokeColor for borders\n     * Set proper fontWeight for different text elements\n\n6. Mofifying existing elements:\n  - use set_text_content() to modify text content.\n\n7. Visual Hierarchy:\n   - Position elements in logical reading order (top to bottom)\n   - Maintain consistent spacing between elements\n   - Use appropriate font sizes for different text types:\n     * Larger for headings/welcome text\n     * Medium for input labels\n     * Standard for button text\n     * Smaller for helper text/links\n\n8. Best Practices:\n   - Verify each creation with get_node_info()\n   - Use parentId to maintain proper hierarchy\n   - Group related elements together in frames\n   - Keep consistent spacing and alignment\n\nExample Login Screen Structure:\n- Login Screen (main frame)\n  - Logo Container (frame)\n    - Logo (image/text)\n  - Welcome Text (text)\n  - Input Container (frame)\n    - Email Input (frame)\n      - Email Label (text)\n      - Email Field (frame)\n    - Password Input (frame)\n      - Password Label (text)\n      - Password Field (frame)\n  - Login Button (frame)\n    - Button Text (text)\n  - Helper Links (frame)\n    - Forgot Password (text)\n    - Don't have account (text)`,\n            },\n          },\n        ],\n        description: \"Best practices for working with Figma designs\",\n      };\n    }\n  );\n\n  // Read Design Strategy Prompt\n  server.prompt(\n    \"read_design_strategy\",\n    \"Best practices for reading Figma designs\",\n    (extra) => {\n      return {\n        messages: [\n          {\n            role: \"assistant\",\n            content: {\n              type: \"text\",\n              text: `When reading Figma designs, follow these best practices:\n\n1. Start with selection:\n   - First use get_selection() to understand the current selection\n   - If no selection ask user to select single or multiple nodes\n\n2. Get node infos of the selected nodes:\n   - Use get_nodes_info() to get the information of the selected nodes\n   - If no selection ask user to select single or multiple nodes\n`,\n            },\n          },\n        ],\n        description: \"Best practices for reading Figma designs\",\n      };\n    }\n  );\n\n  // Text Replacement Strategy Prompt\n  server.prompt(\n    \"text_replacement_strategy\",\n    \"Systematic approach for replacing text in Figma designs\",\n    (extra) => {\n      return {\n        messages: [\n          {\n            role: \"assistant\",\n            content: {\n              type: \"text\",\n              text: `# Intelligent Text Replacement Strategy\n\n## 1. Analyze Design & Identify Structure\n- Scan text nodes to understand the overall structure of the design\n- Use AI pattern recognition to identify logical groupings:\n  * Tables (rows, columns, headers, cells)\n  * Lists (items, headers, nested lists)\n  * Card groups (similar cards with recurring text fields)\n  * Forms (labels, input fields, validation text)\n  * Navigation (menu items, breadcrumbs)\n\\`\\`\\`\nscan_text_nodes(nodeId: \"node-id\")\nget_node_info(nodeId: \"node-id\")  // optional\n\\`\\`\\`\n\n## 2. Strategic Chunking for Complex Designs\n- Divide replacement tasks into logical content chunks based on design structure\n- Use one of these chunking strategies that best fits the design:\n  * **Structural Chunking**: Table rows/columns, list sections, card groups\n  * **Spatial Chunking**: Top-to-bottom, left-to-right in screen areas\n  * **Semantic Chunking**: Content related to the same topic or functionality\n  * **Component-Based Chunking**: Process similar component instances together\n\n## 3. Progressive Replacement with Verification\n- Create a safe copy of the node for text replacement\n- Replace text chunk by chunk with continuous progress updates\n- After each chunk is processed:\n  * Export that section as a small, manageable image\n  * Verify text fits properly and maintain design integrity\n  * Fix issues before proceeding to the next chunk\n\n\\`\\`\\`\n// Clone the node to create a safe copy\nclone_node(nodeId: \"selected-node-id\", x: [new-x], y: [new-y])\n\n// Replace text chunk by chunk\nset_multiple_text_contents(\n  nodeId: \"parent-node-id\", \n  text: [\n    { nodeId: \"node-id-1\", text: \"New text 1\" },\n    // More nodes in this chunk...\n  ]\n)\n\n// Verify chunk with small, targeted image exports\nexport_node_as_image(nodeId: \"chunk-node-id\", format: \"PNG\", scale: 0.5)\n\\`\\`\\`\n\n## 4. Intelligent Handling for Table Data\n- For tabular content:\n  * Process one row or column at a time\n  * Maintain alignment and spacing between cells\n  * Consider conditional formatting based on cell content\n  * Preserve header/data relationships\n\n## 5. Smart Text Adaptation\n- Adaptively handle text based on container constraints:\n  * Auto-detect space constraints and adjust text length\n  * Apply line breaks at appropriate linguistic points\n  * Maintain text hierarchy and emphasis\n  * Consider font scaling for critical content that must fit\n\n## 6. Progressive Feedback Loop\n- Establish a continuous feedback loop during replacement:\n  * Real-time progress updates (0-100%)\n  * Small image exports after each chunk for verification\n  * Issues identified early and resolved incrementally\n  * Quick adjustments applied to subsequent chunks\n\n## 7. Final Verification & Context-Aware QA\n- After all chunks are processed:\n  * Export the entire design at reduced scale for final verification\n  * Check for cross-chunk consistency issues\n  * Verify proper text flow between different sections\n  * Ensure design harmony across the full composition\n\n## 8. Chunk-Specific Export Scale Guidelines\n- Scale exports appropriately based on chunk size:\n  * Small chunks (1-5 elements): scale 1.0\n  * Medium chunks (6-20 elements): scale 0.7\n  * Large chunks (21-50 elements): scale 0.5\n  * Very large chunks (50+ elements): scale 0.3\n  * Full design verification: scale 0.2\n\n## Sample Chunking Strategy for Common Design Types\n\n### Tables\n- Process by logical rows (5-10 rows per chunk)\n- Alternative: Process by column for columnar analysis\n- Tip: Always include header row in first chunk for reference\n\n### Card Lists\n- Group 3-5 similar cards per chunk\n- Process entire cards to maintain internal consistency\n- Verify text-to-image ratio within cards after each chunk\n\n### Forms\n- Group related fields (e.g., \"Personal Information\", \"Payment Details\")\n- Process labels and input fields together\n- Ensure validation messages and hints are updated with their fields\n\n### Navigation & Menus\n- Process hierarchical levels together (main menu, submenu)\n- Respect information architecture relationships\n- Verify menu fit and alignment after replacement\n\n## Best Practices\n- **Preserve Design Intent**: Always prioritize design integrity\n- **Structural Consistency**: Maintain alignment, spacing, and hierarchy\n- **Visual Feedback**: Verify each chunk visually before proceeding\n- **Incremental Improvement**: Learn from each chunk to improve subsequent ones\n- **Balance Automation & Control**: Let AI handle repetitive replacements but maintain oversight\n- **Respect Content Relationships**: Keep related content consistent across chunks\n\nRemember that text is never just text—it's a core design element that must work harmoniously with the overall composition. This chunk-based strategy allows you to methodically transform text while maintaining design integrity.`,\n            },\n          },\n        ],\n        description: \"Systematic approach for replacing text in Figma designs\",\n      };\n    }\n  );\n}\n\n// Export individual prompt registration functions\nexport function registerDesignStrategyPrompt(server: McpServer): void {\n  server.prompt(\n    \"design_strategy\",\n    \"Best practices for working with Figma designs\",\n    (extra) => {\n      // Implementation is the same as above\n      // This function is exported for individual usage if needed\n    }\n  );\n}\n\nexport function registerReadDesignStrategyPrompt(server: McpServer): void {\n  server.prompt(\n    \"read_design_strategy\",\n    \"Best practices for reading Figma designs\",\n    (extra) => {\n      // Implementation is the same as above\n      // This function is exported for individual usage if needed\n    }\n  );\n}\n\nexport function registerTextReplacementStrategyPrompt(server: McpServer): void {\n  server.prompt(\n    \"text_replacement_strategy\",\n    \"Systematic approach for replacing text in Figma designs\",\n    (extra) => {\n      // Implementation is the same as above\n      // This function is exported for individual usage if needed\n    }\n  );\n}"],"mappings":"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","names":["WebSocket","WebSocket","uuidv4","import_zod","import_zod","import_zod","import_zod"]}